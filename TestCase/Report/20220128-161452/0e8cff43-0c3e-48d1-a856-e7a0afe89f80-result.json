{"name": "test_001[3]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_request.Test_request object at 0x0000020EE4C1ECA0>, a = '3'\n\n    @pytest.mark.parametrize(\"a\",[\"1\",\"2\",\"3\"])\n    #当A=1时为品项搜索，当A等于2时为品项查看，当A等于3时为品项编辑。\n    @allure.story(\"品项管理接口搜索/查看/编辑，当A=1时为品项搜索，当A等于2时为品项查看，当A等于3时为品项编辑。\")\n    @pytest.mark.test_001\n    @pytest.mark.flaky(reruns=0,reruns_delay=10)\n    def test_001(self,a):\n        final_data=Doexcel().get_test_data(data_list, \"test_001，test_002，test_003\")\n        if a == \"1\":\n            requestdata=RequestsHandler().get_Req(url=final_data[0]['url'],params=eval(final_data[0]['params']),headers=header_list,json=\"\",data=\"\")\n            asser.assert_code(final_data[0]['status_code'],requestdata.status_code)\n        elif a== \"2\":\n            requestdata=RequestsHandler().get_Req(url=final_data[1]['url'],params=\"\",headers=header_list,json=\"\",data=\"\")\n            asser.assert_code(final_data[1]['status_code'],requestdata.status_code)\n        else:\n            print(final_data[2]['url'])\n            print(final_data[2]['bodys'])\n            requestdata=RequestsHandler().patch_Req(url=final_data[2]['url'],params=\"\",headers=header_list,json=final_data[2]['bodys'],data=\"\")\n>           asser.assert_code(final_data[2]['status_code'],requestdata.status_code)\n\nTestCase\\test_request.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.assertbase.Assertions object at 0x0000020EE4BA8AC0>, code = 200.0, url_code = 405\n\n    def assert_code(self,code,url_code):\n        \"\"\"\n        验证response状态码\n        \"\"\"\n        self.logger.info(f'预计接口返回code为\"{code}\",实际返回code为:\"{url_code}\"')\n        try:\n>           assert code == url_code\nE           AssertionError\n\nCommon\\assertbase.py:30: AssertionError"}, "attachments": [{"name": "log", "source": "e32a4e2f-eb6b-46f9-b793-d6b11349bffe-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f5dc4a27-eb4d-48a1-8166-b64374974b82-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "c0227861-428a-4a57-b57b-0fd89a8442df-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "a", "value": "'3'"}], "start": 1643357693986, "stop": 1643357694054, "uuid": "ff7a619c-9a15-4d00-9c47-22f92a41061e", "historyId": "1603c534382579bcd77d0cee9f370178", "testCaseId": "e1a728ea969dc8b74c6123aa88869001", "fullName": "TestCase.test_request.Test_request#test_001", "labels": [{"name": "story", "value": "品项管理接口搜索/查看/编辑，当A=1时为品项搜索，当A等于2时为品项查看，当A等于3时为品项编辑。"}, {"name": "tag", "value": "test_001"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=10)"}, {"name": "parentSuite", "value": "TestCase"}, {"name": "suite", "value": "test_request"}, {"name": "subSuite", "value": "Test_request"}, {"name": "host", "value": "DESKTOP-MNSA4SL"}, {"name": "thread", "value": "15152-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.test_request"}]}